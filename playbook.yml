---
- name: Deploy secure web application in Docker container
  hosts: localhost
  connection: local
  become: yes
  vars_prompt:
    - name: app_password
      prompt: "Enter password for app user"
      private: yes
  vars:
    app_user: "appadmin"
    download_url: "https://github.com/octocat/Hello-World/tarball/master"
    download_checksum: "sha256:9f40b519431e9754a1680244b820877ca975aa969ea4ae72798bfe3f67d0f139"
    work_dir: "/opt/webapp"
    container_name: "secure-app"
    image_version: "stable-alpine"
    token_file: "/etc/secure-app/token.txt"
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
      tags: packages

    - name: Install Docker
      apt:
        name: docker.io
        state: present
      tags: docker

    - name: Docker service is running
      service:
        name: docker
        state: started
        enabled: yes
      tags: docker

    - name: Web application user exists
      user:
        name: "{{ app_user }}"
        password: "{{ app_password | password_hash('sha512') }}"
        update_password: on_create
      tags: users

    - name: Configure firewall to allow only necessary ports
      ufw:
        rule: allow
        port: "8080"
        proto: tcp
      tags: network

    - name: Enable firewall
      ufw:
        state: enabled
        policy: deny
      tags: network

    - name: Download application archive
      get_url:
        url: "{{ download_url }}"
        dest: "/tmp/app.tar.gz"
        checksum: "{{ download_checksum }}"
        mode: "0640"
        owner: "{{ app_user }}"
      tags: download

    - name: Ensure working directory exists
      file:
        path: "{{ work_dir }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0750'
      tags: deploy

    - name: Extract application archive
      unarchive:
        src: "/tmp/app.tar.gz"
        dest: "{{ work_dir }}"
        remote_src: yes
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
      tags: deploy

    - name: Create token directory
      file:
        path: "/etc/secure-app"
        state: directory
        owner: root
        group: root
        mode: '0700'
      tags: token

    - name: Generate secret token
      shell: openssl rand -hex 16
      register: secret_token
      changed_when: false
      tags: token

    - name: Store token in secure file
      copy:
        dest: "{{ token_file }}"
        content: "{{ secret_token.stdout }}"
        owner: root
        group: root
        mode: '0400'
      tags: token

    - name: Deploy index.html with reference to token service
      copy:
        dest: "{{ work_dir }}/index.html"
        content: |
          <!DOCTYPE html>
          <html>
          <head><title>Secure Web App</title></head>
          <body>
            <h1>Welcome</h1>
            <p>This is a secure application. Tokens are managed by a separate service.</p>
          </body>
          </html>
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0644'
      tags: web

    - name: Set appropriate permissions on work directory
      file:
        path: "{{ work_dir }}"
        state: directory
        recurse: yes
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'
      tags: permissions

    - name: Run secure Nginx container
      docker_container:
        name: "{{ container_name }}"
        image: "nginx:{{ image_version }}"
        state: started
        restart_policy: always
        ports:
          - "8080:80"
        volumes:
          - "{{ work_dir }}:/usr/share/nginx/html:ro"
          - "{{ token_file }}:/etc/secrets/token.txt:ro"
        tmpfs:
          - "/var/cache/nginx"
          - "/var/run"
          - "/tmp"
        read_only: true
        security_opts:
          - no-new-privileges:true
        cap_drop:
          - ALL
        capabilities:
          - NET_BIND_SERVICE
          - DAC_OVERRIDE
          - CHOWN
          - SETGID
          - SETUID
      tags: docker

    - name: Grant limited sudo access to app user
      copy:
        dest: "/etc/sudoers.d/{{ app_user }}"
        content: "{{ app_user }} ALL=(ALL) NOPASSWD:/usr/bin/docker ps, /usr/bin/systemctl restart nginx"
        mode: '0440'
        validate: "visudo -cf %s"
      tags: sudoers
